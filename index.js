document.addEventListener("DOMContentLoaded", () => {
    const inputField = document.getElementById("input");
    const submitButton = document.getElementById("submit-button");

    // Handle Enter key press
    inputField.addEventListener("keydown", (e) => {
        if (e.code === "Enter") {
            e.preventDefault();  // Prevents form submission or other default actions
            handleSubmit();
        }
    });

    // Handle button click
    submitButton.addEventListener("click", handleSubmit);

    // Adding event listener for the date input
    const dateInputField = document.getElementById("date-input");
    dateInputField.addEventListener("change", () => {
        let date = dateInputField.value;
        handleInput(date);
    });

    displayMessage("Please select your preferred language:", "bot");
    displayMessage('<button onclick="selectLanguage(\'en\')">English</button> <button onclick="selectLanguage(\'hi\')">‡§π‡§ø‡§Ç‡§¶‡•Ä</button> <button onclick="selectLanguage(\'te\')">‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å</button>', "bot");
});

function handleSubmit() {
    const inputField = document.getElementById("input");
    const input = inputField.value.trim();
    if (input) {
        inputField.value = "";
        handleInput(input);
    }
}


// document.addEventListener("DOMContentLoaded", () => {
//     const inputField = document.getElementById("input");
//     inputField.addEventListener("keydown", (e) => {
//         if (e.code === "Enter") {
//             e.preventDefault();
//             handleSubmit();
//         }
//     });

//     // Adding an event listener for the date input
//     const dateInputField = document.getElementById("date-input");
//     dateInputField.addEventListener("change", () => {
//         let date = dateInputField.value;
//         handleInput(date);
//     });

//     displayMessage("Please select your preferred language:", "bot");
//     displayMessage('<button onclick="selectLanguage(\'en\')">English</button> <button onclick="selectLanguage(\'hi\')">‡§π‡§ø‡§Ç‡§¶‡•Ä</button> <button onclick="selectLanguage(\'te\')">‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å</button>', "bot");
// });

let userData = {
    name: "",
    phone: "",
    email: "",
    numberOfTickets: 0,
    date: "",
    ticketIDs: [],
    paymentMethod: "",
    cancelName: "",
    selectedMuseum: ""
};

let currentFlow = [];
let currentStep = 0;
let currentLanguage = 'en';

window.selectLanguage = function (language) {
    currentLanguage = language;
    displayMuseums();
}

function displayMuseums() {
    displayMessage("Please select a museum to visit:", "bot");
    displayMessage('<button onclick="selectMuseum(\'Salarjung\')">Salarjung Museum</button> <button onclick="selectMuseum(\'BirlaScience\')">Birla Science Museum</button> <button onclick="selectMuseum(\'Nizam\')">Nizam Museum</button>', "bot");
}

window.selectMuseum = function (museum) {
    userData.selectedMuseum = museum;
    startConversation();
}

function startConversation() {
    displayMessage(languages[currentLanguage].welcome, "bot");
    displayMessage(languages[currentLanguage].help, "bot");
    displayMessage(`<button onclick="startBooking()">${languages[currentLanguage].makeTicket}</button> <button onclick="cancelTicket()">${languages[currentLanguage].cancelTicket}</button>`, "bot");
}

function handleInput(input) {
    if (currentFlow.length > 0) {
        const currentField = currentFlow[currentStep].field;
        if (currentField) {
            if (currentField === "date") {
                input = document.getElementById("date-input").value;
                document.getElementById("date-input").style.display = "none";
                if (!isValidDate(input)) {
                    displayMessage(languages[currentLanguage].wrongDate, "bot");
                    return;
                }
                userData.date = input;
                displayMessage(languages[currentLanguage].dateDisplay.replace("{date}", formatDate(input)), "bot");
            } else {
                userData[currentField] = input;

                if (currentField === "name") {
                    displayMessage(languages[currentLanguage].niceToMeet.replace("{name}", userData.name), "bot");
                }
            }
        }
        currentStep++;
        if (currentStep < currentFlow.length) {
            let nextQuestion = currentFlow[currentStep].question;
            if (currentField === "name") {
                nextQuestion = nextQuestion.replace("{name}", userData.name);
            }
            displayMessage(nextQuestion, "bot");
            if (currentFlow[currentStep].field === "date") {
                document.getElementById("date-input").style.display = "block";
            }
        } else {
            // If flow reaches the end, display payment options
            if (currentFlow.length > 0 && currentFlow[currentFlow.length - 1].field === null) {
                displayPaymentOptions();
            }
        }
    } else {
        displayMessage(languages[currentLanguage].help, "bot");
    }
}

window.startBooking = function () {
    currentFlow = bookingFlow.map(step => ({
        ...step,
        question: languages[currentLanguage][step.question]
    }));
    currentStep = 0;
    displayMessage(currentFlow[currentStep].question, "bot");
}

window.cancelTicket = function () {
    currentFlow = cancelFlow.map(step => ({
        ...step,
        question: languages[currentLanguage][step.question]
    }));
    currentStep = 0;
    displayMessage(currentFlow[currentStep].question, "bot");
}

// function handleSubmit() {
//     const inputField = document.getElementById("input");
//     const input = inputField.value.trim();
//     if (input) {
//         inputField.value = "";
//         handleInput(input);
//     }
// }

function displayMessage(text, sender) {
    const messagesContainer = document.getElementById("messages");
    let messageDiv = document.createElement("div");
    messageDiv.className = sender === "bot" ? "bot response" : "user response";
    messageDiv.innerHTML = `<span>${text}</span>`;
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight - messagesContainer.clientHeight;
}

function isValidDate(dateString) {
    const regex = /^\d{4}-\d{2}-\d{2}$/;
    if (!dateString.match(regex)) return false;

    const date = new Date(dateString);
    const timestamp = date.getTime();

    if (typeof timestamp !== 'number' || Number.isNaN(timestamp)) return false;
    return dateString === date.toISOString().split('T')[0];
}

function generateTicketIDs(count) {
    let ticketIDs = [];
    for (let i = 0; i < count; i++) {
        ticketIDs.push(Math.floor(Math.random() * 900000) + 100000);
    }
    return ticketIDs;
}

function displayPaymentOptions() {
    const paymentOptions = `
        <div style="display: flex; flex-direction: column; align-items: center; margin: 20px;">
            <button onclick="payWith('GPay')">${languages[currentLanguage].gPay}</button>
            <button onclick="payWith('PhonePe')">${languages[currentLanguage].phonePe}</button>
            <button onclick="payWith('NetBanking')">${languages[currentLanguage].netBanking}</button>
        </div>
    `;
    displayMessage(languages[currentLanguage].paymentQuestion, "bot");
    displayMessage(paymentOptions, "bot");
}

window.payWith = function (method) {
    userData.paymentMethod = method;
    userData.ticketIDs = generateTicketIDs(userData.numberOfTickets);
    displayMessage(languages[currentLanguage].thankYou, "bot");
    displayMessage(languages[currentLanguage].ticketIDs.replace("{ticketIDs}", userData.ticketIDs.join(', ')), "bot");
    displayMessage(languages[currentLanguage].viewGallery, "bot");
}

function displayMuseumOptions() {
    const museumOptions = `
        <div style="display: flex; flex-direction: column; align-items: center; margin: 20px;">
            <button onclick="openMuseum('salarjung')">Salarjung Museum</button>
            <button onclick="openMuseum('birla')">Birla Science Museum</button>
            <button onclick="openMuseum('nizam')">Nizam Museum</button>
        </div>
    `;
    displayMessage("Please select a museum to explore:", "bot");
    displayMessage(museumOptions, "bot");
}

function openMuseum(museum) {
    let url;
    switch(museum) {
        case 'salarjung':
            url = 'https://www.salarjungmuseum.in/photo-gallery.html';
            break;
        case 'birla':
            url = 'https://gpbaasri.org/';
            break;
        case 'nizam':
            url = 'https://www.thenizamsmuseum.com/';
            break;
    }
    if (url) {
        window.open(url, '_blank');
    }
}

function formatDate(dateString) {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString(currentLanguage, options);
}

const bookingFlow = [
    { field: "name", question: "nameQuestion" },
    { field: "phone", question: "phoneQuestion" },
    { field: "email", question: "emailQuestion" },
    { field: "numberOfTickets", question: "ticketCountQuestion" },
    { field: "date", question: "dateQuestion" },
    { field: null, question: "paymentQuestion" }
];

const cancelFlow = [
    { field: "cancelName", question: "cancelNameQuestion" }
];

const languages = {
    en: {
        welcome: "Hi there! üëã<br>Welcome to our museum. We are thrilled to dive you into the world of antics...!!",
        help: "How can I help you today?",
        makeTicket: "Make a ticket",
        cancelTicket: "Cancel a ticket",
        additionalTickets: "Additional tickets",
        nameQuestion: "Let's begin with your name.",
        niceToMeet: "Nice to meet you, {name}!",
        phoneQuestion: "Lovely! And your phone number?",
        emailQuestion: "Great! Could you please provide your email?",
        ticketCountQuestion: "How many people should I book for?",
        dateQuestion: "When will you be visiting?",
        wrongDate: "Wrong date format. Please use YYYY-MM-DD.",
        dateDisplay: "You have chosen {date}.",
        thankYou: "Thank you for your booking!",
        ticketIDs: "Your ticket IDs are: {ticketIDs}",
        paymentQuestion: "Please choose your payment method:",
        gPay: "Pay with GPay",
        phonePe: "Pay with PhonePe",
        netBanking: "Pay with NetBanking",
        viewGallery: "You can view the gallery of the museums by clicking the buttons below:",
        cancelNameQuestion: "To cancel your booking, please provide your name."
    },
    hi: {
        welcome: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! üëã<br>‡§π‡§Æ‡§æ‡§∞‡•á ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π‡§æ‡§≤‡§Ø ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ ‡§π‡§Æ ‡§Ü‡§™‡§ï‡•ã ‡§™‡•ç‡§∞‡§æ‡§ö‡•Ä‡§® ‡§µ‡§∏‡•ç‡§§‡•Å‡§ì‡§Ç ‡§ï‡•Ä ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§Æ‡•á‡§Ç ‡§≤‡•á ‡§ú‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§§‡•ç‡§∏‡§æ‡§π‡§ø‡§§ ‡§π‡•à‡§Ç...!!",
        help: "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?",
        makeTicket: "‡§ü‡§ø‡§ï‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç",
        cancelTicket: "‡§ü‡§ø‡§ï‡§ü ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
        additionalTickets: "‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ü‡§ø‡§ï‡§ü",
        nameQuestion: "‡§ö‡§≤‡§ø‡§Ø‡•á, ‡§∏‡§¨‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§",
        niceToMeet: "‡§Ü‡§™‡§∏‡•á ‡§Æ‡§ø‡§≤‡§ï‡§∞ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§≤‡§ó‡§æ, {name}!",
        phoneQuestion: "‡§∏‡•Å‡§Ç‡§¶‡§∞! ‡§î‡§∞ ‡§Ü‡§™‡§ï‡§æ ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞?",
        emailQuestion: "‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§à‡§Æ‡•á‡§≤ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§",
        ticketCountQuestion: "‡§ï‡§ø‡§§‡§®‡•á ‡§≤‡•ã‡§ó‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡§∞‡§®‡•Ä ‡§π‡•à?",
        dateQuestion: "‡§Ü‡§™ ‡§ï‡§¨ ‡§Ü ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?",
        wrongDate: "‡§ó‡§≤‡§§ ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ YYYY-MM-DD ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§",
        dateDisplay: "‡§Ü‡§™‡§®‡•á {date} ‡§ï‡•ã ‡§ö‡•Å‡§®‡§æ ‡§π‡•à‡•§",
        thankYou: "‡§Ü‡§™‡§ï‡•Ä ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!",
        ticketIDs: "‡§Ü‡§™‡§ï‡•á ‡§ü‡§ø‡§ï‡§ü ‡§Ü‡§à‡§°‡•Ä ‡§π‡•à‡§Ç: {ticketIDs}",
        paymentQuestion: "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§µ‡§ø‡§ß‡§ø ‡§ö‡•Å‡§®‡•á‡§Ç:",
        gPay: "GPay ‡§∏‡•á ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç",
        phonePe: "PhonePe ‡§∏‡•á ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç",
        netBanking: "‡§®‡•á‡§ü‡§¨‡•à‡§Ç‡§ï‡§ø‡§Ç‡§ó ‡§∏‡•á ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç",
        viewGallery: "‡§Ü‡§™ ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π‡§æ‡§≤‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§ó‡•à‡§≤‡§∞‡•Ä ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§¨‡§ü‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:",
        cancelNameQuestion: "‡§Ö‡§™‡§®‡•Ä ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§"
    },
    te: {
        welcome: "‡∞π‡∞æ‡∞Ø‡±ç! üëã<br>‡∞Æ‡∞æ ‡∞Æ‡±ç‡∞Ø‡±Ç‡∞ú‡∞ø‡∞Ø‡∞Ç‡∞≤‡±ã ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç. ‡∞™‡±ç‡∞∞‡∞æ‡∞ö‡±Ä‡∞® ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞µ‡±Å‡∞≤ ‡∞™‡±ç‡∞∞‡∞™‡∞Ç‡∞ö‡∞Ç‡∞≤‡±ã‡∞ï‡∞ø ‡∞Æ‡±Ä‡∞®‡±Å ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±Ü‡∞≥‡±ç‡∞≤‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Æ‡±á‡∞Æ‡±Å ‡∞â‡∞§‡±ç‡∞∏‡∞æ‡∞π‡∞Ç‡∞ó‡∞æ ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞Æ‡±Å...!!",
        help: "‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞é‡∞≤‡∞æ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å?",
        makeTicket: "‡∞ü‡∞ø‡∞ï‡±Ü‡∞ü‡±ç ‡∞§‡∞Ø‡∞æ‡∞∞‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        cancelTicket: "‡∞ü‡∞ø‡∞ï‡±Ü‡∞ü‡±ç ‡∞∞‡∞¶‡±ç‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        additionalTickets: "‡∞Ö‡∞¶‡∞®‡∞™‡±Å ‡∞ü‡∞ø‡∞ï‡±Ü‡∞ü‡±ç‡∞≤‡±Å",
        nameQuestion: "‡∞™‡±ç‡∞∞‡∞æ‡∞∞‡∞Ç‡∞≠‡∞Ç‡∞ó‡∞æ ‡∞Æ‡±Ä ‡∞™‡±á‡∞∞‡±Å ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞Ç‡∞°‡∞ø.",
        niceToMeet: "‡∞Æ‡±Ä‡∞§‡±ã ‡∞ï‡∞≤‡∞µ‡∞°‡∞Ç ‡∞Æ‡∞Ç‡∞ö‡∞ø ‡∞µ‡∞ø‡∞∑‡∞Ø‡∞Ç, {name}!",
        phoneQuestion: "‡∞Ö‡∞¶‡±ç‡∞≠‡±Å‡∞§‡∞Ç! ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Æ‡±Ä ‡∞´‡±ã‡∞®‡±ç ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç?",
        emailQuestion: "‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞Ç‡∞°‡∞ø! ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø.",
        ticketCountQuestion: "‡∞é‡∞®‡±ç‡∞®‡∞ø ‡∞Æ‡∞Ç‡∞¶‡∞ø‡∞ï‡∞ø ‡∞¨‡±Å‡∞ï‡±ç ‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡∞ø?",
        dateQuestion: "‡∞Æ‡±Ä‡∞∞‡±Å ‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞∞‡∞æ‡∞¨‡±ã‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å?",
        wrongDate: "‡∞§‡∞™‡±ç‡∞™‡±Å ‡∞§‡±á‡∞¶‡±Ä ‡∞´‡∞æ‡∞∞‡±ç‡∞Æ‡∞æ‡∞ü‡±ç. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø YYYY-MM-DD ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.",
        dateDisplay: "‡∞Æ‡±Ä‡∞∞‡±Å {date} ‡∞® ‡∞é‡∞Ç‡∞™‡∞ø‡∞ï ‡∞ö‡±á‡∞∂‡∞æ‡∞∞‡±Å.",
        thankYou: "‡∞Æ‡±Ä ‡∞¨‡±Å‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å!",
        ticketIDs: "‡∞Æ‡±Ä ‡∞ü‡∞ø‡∞ï‡±Ü‡∞ü‡±ç ID ‡∞≤‡±Å: {ticketIDs}",
        paymentQuestion: "‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞ö‡±Ü‡∞≤‡±ç‡∞≤‡∞ø‡∞Ç‡∞™‡±Å ‡∞™‡∞¶‡±ç‡∞ß‡∞§‡∞ø‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:",
        gPay: "GPay ‡∞§‡±ã ‡∞ö‡±Ü‡∞≤‡±ç‡∞≤‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        phonePe: "PhonePe ‡∞§‡±ã ‡∞ö‡±Ü‡∞≤‡±ç‡∞≤‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        netBanking: "‡∞®‡±Ü‡∞ü‡±ç‚Äå‡∞¨‡±ç‡∞Ø‡∞æ‡∞Ç‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç‚Äå‡∞§‡±ã ‡∞ö‡±Ü‡∞≤‡±ç‡∞≤‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        viewGallery: "‡∞Æ‡±Ä‡∞∞‡±Å ‡∞ï‡±ç‡∞∞‡∞ø‡∞Ç‡∞¶ ‡∞á‡∞ö‡±ç‡∞ö‡∞ø‡∞® ‡∞¨‡∞ü‡∞®‡±ç‡∞≤‡∞™‡±à ‡∞ï‡±ç‡∞≤‡∞ø‡∞ï‡±ç ‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±ç‡∞Ø‡±Ç‡∞ú‡∞ø‡∞Ø‡∞Æ‡±ç‡∞∏‡±ç ‡∞Ø‡±ä‡∞ï‡±ç‡∞ï ‡∞ó‡±ç‡∞Ø‡∞æ‡∞≤‡∞∞‡±Ä‡∞®‡∞ø ‡∞µ‡±Ä‡∞ï‡±ç‡∞∑‡∞ø‡∞Ç‡∞ö‡∞µ‡∞ö‡±ç‡∞ö‡±Å:",
        cancelNameQuestion: "‡∞Æ‡±Ä ‡∞¨‡±Å‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç‚Äå‡∞®‡±Å ‡∞∞‡∞¶‡±ç‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø, ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞™‡±á‡∞∞‡±Å ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø."
    }
};
